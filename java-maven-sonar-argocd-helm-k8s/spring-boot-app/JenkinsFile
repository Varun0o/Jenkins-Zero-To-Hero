pipeline {
  agent {
    docker {
      image 'abhishekf5/maven-abhishek-docker-agent:v1'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
    }
  }
  stages {
    stage('Checkout') {
      steps {
        script {
          // Optional: Check if the workspace is clean
          sh 'echo "Workspace content:" && ls -ltr'
        }
        // Uncomment the following to clone the repository
        // git branch: 'main', url: 'https://github.com/iam-veeramalla/Jenkins-Zero-To-Hero.git'
      }
    }
    
    stage('Build and Test') {
      steps {
        script {
          sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
        }
      }
    }

    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://172.31.216.182:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          script {
            sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
          }
        }
      }
    }

    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "varun0o/ultimate-cicd:${BUILD_NUMBER}"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
          sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
          def dockerImage = docker.image("${DOCKER_IMAGE}")
          docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
            dockerImage.push()
          }
        }
      }
    }

    stage('Update Deployment File') {
      environment {
        GIT_REPO_NAME = "Jenkins-Zero-To-Hero"
        GIT_USER_NAME = "varun0o"
      }
      steps {
        withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
          script {
            // Ensure BUILD_NUMBER is set correctly
            def buildNumber = env.BUILD_NUMBER ?: '1'
            
            sh '''
              git config user.email "sharmavarunkaka098@gmail.com"
              git config user.name "Varun sharma"
              
              # Replace image tag in deployment.yml
              sed -i "s/replaceImageTag/${buildNumber}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
              
              # Stage the changes
              git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
              
              # Commit changes (ignore if nothing to commit)
              git commit -m "Update deployment image to version ${buildNumber}" || echo "Nothing to commit, skipping."

              # Push changes to GitHub
              git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
            '''
          }
        }
      }
    }
  }
}
