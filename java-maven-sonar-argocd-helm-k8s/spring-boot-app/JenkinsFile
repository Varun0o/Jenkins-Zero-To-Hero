pipeline {
  agent {
    docker {
      image 'abhishekf5/maven-abhishek-docker-agent:v1'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
    }
  }
  
  environment {
    BUILD_NUMBER = "${env.BUILD_NUMBER}"  // Jenkins build number
    DOCKER_IMAGE = "varun0o/ultimate-cicd:${BUILD_NUMBER}"  // Docker image with version tag
    GIT_REPO_NAME = "Jenkins-Zero-To-Hero"
    GIT_USER_NAME = "varun0o"
  }

  stages {
    stage('Checkout and Clean Workspace') {
      agent any  // Ensures this step runs on any available Jenkins agent
      steps {
        script {
          // Clean the workspace to avoid conflicts
          deleteDir()
          checkout scm // Checkout the repository
          sh 'echo "Checked out workspace content:" && ls -ltr'
        }
      }
    }

    stage('Build and Test') {
      steps {
        script {
          sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
        }
      }
    }

    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://172.31.216.182:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          script {
            sh '''
              cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
              mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}
            '''
          }
        }
      }
    }

    stage('Build and Push Docker Image') {
      steps {
        script {
          sh '''
            cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
            docker build -t ${DOCKER_IMAGE} .
          '''
          def dockerImage = docker.image("${DOCKER_IMAGE}")
          docker.withRegistry('https://index.docker.io/v1/', 'docker-cred') {
            dockerImage.push()
          }
        }
      }
    }

    stage('Update Deployment File') {
      steps {
        withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
          script {
            // Update deployment.yml with the new Docker image version
            sh '''
              sed -i "s|replaceImageTag|${BUILD_NUMBER}|g" \
              java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
            '''

            // Ensure proper Git configuration and commit handling
            sh '''
              git config --global user.email "sharmavarunkaka098@gmail.com"
              git config --global user.name "Varun Sharma"
              git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml

              git commit -m "Update deployment image to version ${BUILD_NUMBER}" || echo "No changes to commit."
              git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git HEAD:main || echo "Push failed, retry with correct permissions."
            '''
          }
        }
      }
    }
  }
}
